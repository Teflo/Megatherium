/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package megatherium.ui.lordsandknights;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.text.JTextComponent;
import javax.swing.text.MaskFormatter;
import megatherium.application.Application;
import megatherium.ui.AccountComboBoxModel;
import megatherium.ui.EventPanel;
import megatherium.ui.LabeledTextField;
import megatherium.communicator.data.Account;
import megatherium.communicator.data.lordsandknights.megatherium.Habitat;
import megatherium.data.store.AccountStore;
import megatherium.data.store.Stores;
import megatherium.data.store.lordsandknights.HabitatStore;
import megatherium.event.EventManager;
import megatherium.event.IEventListener;
import megatherium.event.IUniversalListener;
import megatherium.util.ReportUtil;

/**
 *
 * @author marti_000
 */
public class AttackCreatePanel extends EventPanel {
	private Map<String, String> resources;
	private Map<String, String> units;

	/**
	 * Creates new form AttackCreatePanel
	 */
	public AttackCreatePanel() {
		initComponents();
		
		// TODO is this correct?!
//		EventManager.getInstance().addListener("lordsandknights.ui.attack.create.show", this, "load");
		EventManager.getInstance().addListener("lordsandknights.ui.unit.selection.save", this, "setUnits");
		EventManager.getInstance().addListener("lordsandknights.ui.resource.selection.save", this, "setResources");
	}
	
	public void setUnits(Map<String, String> units) {this.units = units;}
	public void setResources(Map<String, String> resources) {this.resources = resources;}
	
	/**
	 * Returns the timestamp.
	 * 
	 * @return the timestamp (seconds since 1.1.1970)
	 */
	public int getTime() {
		try {
			int time = (int) (new SimpleDateFormat("dd.MM.yyyy HH:mm:ss").parse(this.time.getText()).getTime()/1000);
			return time;
		} catch (ParseException ex) {
			ReportUtil.getInstance().add(ex);
		}
		return 0;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        account = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        try {
            MaskFormatter mf = new MaskFormatter("##.##.#### ##:##:##");
            time = new javax.swing.JFormattedTextField(mf);
            unitSelection = new javax.swing.JButton();
            resourceSelection = new javax.swing.JButton();
            save = new javax.swing.JButton();
            cancel = new javax.swing.JButton();
            jLabel3 = new javax.swing.JLabel();
            habitat = new javax.swing.JComboBox();
            jLabel4 = new javax.swing.JLabel();
            targetHabitatID = new LabeledTextField("ID des Ziels (Freie Burg 344403 => ID: 344403)");

            jLabel1.setText("Konto:");

            account.setModel(new AccountComboBoxModel());
            account.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    accountActionPerformed(evt);
                }
            });

            jLabel2.setText("Uhrzeit:");

            time.setInputVerifier(new InputVerifier() {
                private SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss");
                public boolean verify(JComponent input) {
                    boolean res = true;
                    JTextComponent tc = (JTextComponent)input;
                    String newContent = tc.getText();
                    if (newContent.length() > 0) {
                        try {
                            Date d = sdf.parse(newContent);

                            if (!sdf.format(d).equals(newContent)) {
                                tc.selectAll();
                                res = false;
                            }
                        }
                        catch (ParseException ex) {
                            tc.selectAll();
                            res = false;
                        }
                    }
                    return res;
                }
            });
        } catch(Exception ex) {
            ReportUtil.getInstance().add(ex);
        }
        time.setText(null);
        time.setToolTipText("Uhrzeit der Durchführung des Angriffs: DD.MM.YYYY HH:MM:SS");
        time.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeActionPerformed(evt);
            }
        });

        unitSelection.setText("Einheiten auswählen");
        unitSelection.setEnabled(false);
        unitSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unitSelectionActionPerformed(evt);
            }
        });

        resourceSelection.setText("Rohstoffe auswählen");
        resourceSelection.setEnabled(false);
        resourceSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resourceSelectionActionPerformed(evt);
            }
        });

        save.setText("Speichern");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        cancel.setText("Abbrechen");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        jLabel3.setText("Habitat:");

        habitat.setModel(new HabitatComboBoxModel());
        habitat.setEnabled(false);
        habitat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                habitatActionPerformed(evt);
            }
        });

        jLabel4.setText("Ziel:");

        targetHabitatID.setText(null);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(time))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(24, 24, 24)
                                .addComponent(account, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(unitSelection)
                                .addGap(18, 18, 18)
                                .addComponent(resourceSelection))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(save)
                                .addGap(18, 18, 18)
                                .addComponent(cancel)))
                        .addGap(0, 88, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(habitat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(targetHabitatID))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(account, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(habitat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(targetHabitatID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(unitSelection)
                    .addComponent(resourceSelection))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(save)
                    .addComponent(cancel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
		EventManager.getInstance().fireEvent("lordsandknights.ui.attack.shedule.show");
    }//GEN-LAST:event_cancelActionPerformed

    private void accountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accountActionPerformed
		this.habitat.setEnabled(true);
		
		// load worlds
		((HabitatComboBoxModel) this.habitat.getModel()).removeAllElements();
		((HabitatComboBoxModel) this.habitat.getModel()).addElement(null);
		if (this.account.getSelectedItem() == null) return;
		for (Habitat habitat : ((HabitatStore) Stores.getInstance().getStore("habitatStore")).getItems(((Account) this.account.getSelectedItem()).getID()))
			((HabitatComboBoxModel) this.habitat.getModel()).addElement(habitat);
    }//GEN-LAST:event_accountActionPerformed

    private void habitatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_habitatActionPerformed
        this.unitSelection.setEnabled(true);
		this.resourceSelection.setEnabled(true);
    }//GEN-LAST:event_habitatActionPerformed

    private void unitSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unitSelectionActionPerformed
        EventManager.getInstance().fireEvent("lordsandknights.ui.unit.selection.show", this.habitat.getSelectedItem());
    }//GEN-LAST:event_unitSelectionActionPerformed

    private void resourceSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resourceSelectionActionPerformed
        EventManager.getInstance().fireEvent("lordsandknights.ui.resource.selection.show", this.habitat.getSelectedItem());
    }//GEN-LAST:event_resourceSelectionActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        int accountID = ((Account) this.account.getSelectedItem()).getID();
		int startHabitatID = ((Habitat) this.habitat.getSelectedItem()).getID();
		int targetHabitatID = Integer.parseInt(this.targetHabitatID.getText());
		int time = this.getTime();
		
		// create attack
		EventManager.getInstance().fireEvent("lordsandknights.data.attack.create", accountID, startHabitatID, targetHabitatID, time, this.resources, this.units);
    }//GEN-LAST:event_saveActionPerformed

    private void timeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeActionPerformed
        
    }//GEN-LAST:event_timeActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox account;
    private javax.swing.JButton cancel;
    private javax.swing.JComboBox habitat;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JButton resourceSelection;
    private javax.swing.JButton save;
    private javax.swing.JTextField targetHabitatID;
    private javax.swing.JFormattedTextField time;
    private javax.swing.JButton unitSelection;
    // End of variables declaration//GEN-END:variables

	private void load() {
		// load accounts
		((AccountComboBoxModel) this.account.getModel()).removeAllElements();
		((AccountComboBoxModel) this.account.getModel()).addElement(null);
		for (Account account : ((AccountStore) Stores.getInstance().getStore("accountStore")).getItems())
			((AccountComboBoxModel) this.account.getModel()).addElement(account);
	}
	
}
